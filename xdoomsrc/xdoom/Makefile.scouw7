################################################################
#
# $Id:$
#
# $Log:$
#

# use SCO cc or one of the various GNU C compilers, your choice
CC=  cc
#CC= gcc

#
# OS dependent Options:
#
#	-DNORMALUNIX		well, I guess should be active for any UNIX
#	-DBIGEND		set this for big endian machines
#
#	-DCAPSLOCK		define this if the X server handles
#				status of the Caps Lock key
#
#	-DLINUX			set this for Linux
#	-DSCOSO5		set this for SCO OpenServer 5
#	-DSCOUW2		set this for SCO Unixware 2 or SCO Unixware 7
#	-DSCOUW7		set this for SCO Unixware 7
#	-DFREEBSD		set this for FreeBSD
#	-DSOLARIS		set this for Sun Solaris
#
# Game options:
#
#	-DSNDSERV		Use external sndserver process to play the
#				sound effects, without this define builtin
#				sound handling will be used.
#	-DSNDINTR		When using builtin sound with this define
#				sound update will be asynchrony with an
#				interrupt. If not defined sound will be
#				updated synchony every game tick.
#	-DSNDMMAP		Use mmap'ed DMA buffer for sound output, if
#				the driver does support it. Only works if
#				SNDINTR is not defined.
#	-DMUSSERV		Compile support for musserver to play
#				music too.
#	-DPOLL_POINTER		With this define code will be compiled, which
#				polls the mouse under X, instead of handling
#				it with X events. This works much better, make
#				sure this is defined.
#	-DBUGFIXES		The original id Software engine has several
#				bugs like Medusa, TFE and bullet/missile
#				eating walls. With this define code will be
#				compiled, which fixes this bugs. Do not try
#				to compile without this option together with
#				USE_ASMMOD, because the assembler routines
#				have the TFE bug fixed.
#
# Optimization/Debugging:
#
#	-DINIT_MESSAGES		More verbose messages from game engine
#				initialization additional to the ... stuff.
#	-DRANGECHECK		Parameter validation debugging, activate this
#				if you mess with the sources.
#	-DUSE_INLINE		Compile some functions as (assembler) inline
#				functions on plaforms with compilers, which
#				do support this. For testing modified sources
#				and for debugging this should be turned off.
#	-DUSE_ASMMOD		Use a module with some functions written in
#				assembler, if this is defined, if undefined
#				portable C source will be compiled. If defined
#				you also need to select the appropriate
#				assembler source module below.

# Production
GAMEOPT=-DBUGFIXES -DPOLL_POINTER -DMUSSERV

# Debugging
#GAMEOPT=-DPOLL_POINTER

# You need to select one of the following possible CD audio modules:
#CDMOD=cd_stub.o		# empty module, doesn't do anything
#CDMOD=cd_test.o		# dummy module to test the CD support
CDMOD=cd_cda.o			# uses Ti Kan's CD audio player 'cda'

# The assembler source modules implemented, use non if portable C
# sources should be compiled. Also use non to compile an engine
# without TFE bugfix!
#ASMMOD=				# use this to compile C
ASMMOD=$(O)/asmmod-x86.o	# use this on Intel x86

# ----- Compiler Flags for SCO cc -----
# Production
OPTFLAGS=-O4 -Xa -DUSE_INLINE -DUSE_ASMMOD \
	-K alloca,pentium,no_ieee,inline,fixed_frame,host,no_loop_unroll

# Debugging
#OPTFLAGS=-g -Xa -K alloca,pentium,no_ieee -DUSE_ASMMOD -DRANGECHECK

# ----- Compiler Flags fuer EGCS -----
# Production
#OPTFLAGS=-O3 -ffast-math -fomit-frame-pointer -fforce-addr -mpentium \
	-DUSE_INLINE -DUSE_ASMMOD

XINCLUDE=/usr/X/include

CFLAGS=$(OPTFLAGS) -DNORMALUNIX -DSCOUW7 -I$(XINCLUDE) $(GAMEOPT)

# subdirectory for objects
O=unixware7

# not too sophisticated dependency
OBJS=				\
		$(O)/doomdef.o		\
		$(O)/doomstat.o		\
		$(O)/dstrings.o		\
		$(O)/i_main.o		\
		$(O)/i_system.o		\
		$(O)/i_sound.o		\
		$(O)/$(CDMOD)		\
		$(O)/i_net.o		\
		$(O)/tables.o		\
		$(O)/f_finale.o		\
		$(O)/f_wipe.o 		\
		$(O)/d_main.o		\
		$(O)/d_net.o		\
		$(O)/d_items.o		\
		$(O)/g_game.o		\
		$(O)/m_menu.o		\
		$(O)/m_comdev.o		\
		$(O)/m_misc.o		\
		$(O)/m_argv.o  		\
		$(O)/m_bbox.o		\
		$(O)/m_fixed.o		\
		$(O)/m_swap.o		\
		$(O)/m_cheat.o		\
		$(O)/m_random.o		\
		$(O)/am_map.o		\
		$(O)/p_ceilng.o		\
		$(O)/p_doors.o		\
		$(O)/p_doorsplus.o	\
		$(O)/p_enemy.o		\
		$(O)/p_floor.o		\
		$(O)/p_inter.o		\
		$(O)/p_lights.o		\
		$(O)/p_map.o		\
		$(O)/p_maputl.o		\
		$(O)/p_plats.o		\
		$(O)/p_pspr.o		\
		$(O)/p_setup.o		\
		$(O)/p_sight.o		\
		$(O)/p_spec.o		\
		$(O)/p_specplus.o	\
		$(O)/p_switch.o		\
		$(O)/p_mobj.o		\
		$(O)/p_telept.o		\
		$(O)/p_tick.o		\
		$(O)/p_saveg.o		\
		$(O)/p_user.o		\
		$(O)/p_acs.o		\
		$(O)/r_bsp.o		\
		$(O)/r_data.o		\
		$(O)/r_draw.o		\
		$(O)/r_main.o		\
		$(O)/r_plane.o		\
		$(O)/r_segs.o		\
		$(O)/r_sky.o		\
		$(O)/r_things.o		\
		$(O)/w_wad.o		\
		$(O)/wi_stuff.o		\
		$(O)/v_video.o		\
		$(O)/st_lib.o		\
		$(O)/st_stuff.o		\
		$(O)/hu_stuff.o		\
		$(O)/hu_lib.o		\
		$(O)/s_sound.o		\
		$(O)/z_zone.o		\
		$(O)/info.o		\
		$(O)/sounds.o		\
		$(O)/searchp.o		\
		$(O)/endtxt.o		\
		$(O)/usleep.o		\
		$(O)/strcmp.o		\
		$(ASMMOD)

$(O)/xdoom:	$(OBJS) $(O)/i_video_xshm.o
	$(CC) $(CFLAGS) $(OBJS) $(O)/i_video_xshm.o \
	-o $(O)/xdoom -lXext -lX11 -lsocket -lm

$(O)/sxdoom:	$(OBJS) $(O)/i_video_sco.o
	$(CC) $(CFLAGS) $(OBJS) $(O)/i_video_sco.o \
	-o $(O)/sxdoom -lsocket -lm

all:	 $(O)/xdoom $(O)/sxdoom

clean:
	rm -f $(O)/*

$(O)/%.o:	%.c
	$(CC) $(CFLAGS) -c $< -o $@

$(O)/%.o:	%.s
	as -t pentium -o $@ $<

#############################################################
#
#############################################################
