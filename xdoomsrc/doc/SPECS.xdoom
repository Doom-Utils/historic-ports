		THE OFFICIAL XDOOM ENGINE SPECIFICATIONS
===========================================================================

The XDoom engine is based on the public sources, id released December 1997.
The excellent document 'THE UNOFFICIAL DOOM SPECS', or short UDS, from
Matthew S Fell specifies the Doom engine very well, with a few minor glitches
in the paper, which are documented too. This documentations are available
on the Internet at a thousand locations and they are included in xwadtools,
available at ftp.cdrom.com, /pub/doom/source. This paper won't be a rewrite
of the existing documentation, which is copyrighted anyway. This paper does
specify additional features added to XDoom, which were not part of the
sources id released. It is assumed that you read the UDS before you start
getting into XDoom's advanced features!

The WAD level map editor 'tkwadcad', included in xwadtools, will always
support all extended XDoom features, just be sure to use xwadtools with the
same release date than the XDoom release. Other WAD editors might or might
not support the features discussed here.

There are small and working example PWAD's in the directory pwads of the
XDoom source archive. They are there for your convenience to try out the
features documented here and to study them with a WAD editor. You need
the commercial Doom][ IWAD for playing with this.


1. New features available by loading xdoom.wad

1.1 Translucency table

XDoom draws various sprites like explosions and powerup spheres
translucent. Also translucent middle textures are supported. For this
the program needs a pre-calculated translucency table, included in a
lump with the name TRANMAP. The xdoom.wad file, automatically loaded
by XDoom, includes such a lump with a 50% translucency table, so that
existing IWAD's and PWAD's without can make use of this feature.
A tool to create other translucency tables is included in xwadtools,
it can be used to add tables to PWAD's with a different factor than
the 50% default. This lump will be used by default in the rendering
engine for all translucency special effects. It is possible to use
textures with different translucency in one level with the extended
Boom linedef 260, see below.
If no TRANMAP lump is found in any of the used PWAD's, the engine will
render everything without translucency, same as option -notrans
was used.


1.2 New chaingun sound

XDoom can play a different sound for the chaingun than using the pistol
sound for it too. For this a sfx lump with the name DSCHGUN must be
present. Xdoom.wad includes such a sfx lump, to enable the feature
for IWAD's and PWAD's without. If this lump is not found in any PWAD,
XDoom will use the pistol sound for the chaingun, same as original
Doom does.


1.3 UAC communication gadget graphics and sound

XDoom is enhanced with a handheld communication device for extended
interaction with the environment. For this a graphic resource with
the name COMDEV and a sound resource with the name DSBEEP must be
present. Both resources are included in xdoom.wad, which will be
loaded automatically, if found. If the resources are missing the
game engine will abort with an error message.


2. New features which can be used in PWAD's

2.1 Translucent textures

XDoom supports translucent normal textures on any 2s line with a new
defined bit in the linedef flag, used is bit 10 for this. In original
Doom 2s lines won't block shoots, so XDoom was enhanced with this feature
too, if bit 11 in the linedef flag is set, this line will block all shoots
from players and monsters. This flag should be set for a 2s line with a
translucent glass or force field normal texture e.g., so that one cannot
shoot through the line, which is very unrealistic.

Please note that XDoom also supports the way Boom does translucent textures
for compatibility, with linedef type 260, see below. One should use the
one or the other method, but not both on the same line. Nothing bad will
happen if one does, it just wastes some CPU cycles in the rendering engine.


2.2 Laser barriers and force fields

XDoom does support realistic working laser barriers and force fields with
linedef 320. Such a linedef is absolutely deadly for players running into
it, monsters never run into lasers. Apply appropriate textures on both
sidedefs on such lines, example textures are included in the PWAD lasdemo.
Of course a laser can be switched off too. Two triggers are provided for
this, linedef 321 is a switch which switches a laser off, after 10 seconds
it goes on again. Linedef 322 is a gun trigger, use this one on the support
texture from which the laser beam emits. If the support texture is shot the
laser goes off and stays off, use this for the imagination of doing damage to
the laser emitter. For making the triggers work the linedef with the trigger
needs to have the same tag than the linedef which builds the laser barrier.
Also the triggers have an effect on the lighting in the sectors in front
and behind the force field linedef 320. Use small sectors with a higher light
level around the laser barrier. If the laser is switched off, the light
adjusts to the lighting of the next closest sector, if laser goes on again,
the old light level for the sectors is restored.
It is a good idea to set translucency for linedefs 320, together with
appropriate textures the lasers look much better and more realistic.
For massive force fields also set the block shoot flag in the linedefs 320,
so that one can't shoot through this line.


2.3 Horizontally sliding doors

A horizontally sliding door is provided with linedef 300. This door can be
opened by players only with the use function (no keys required) and
automatically closes after 4 seconds. For this door to work special textures
are required! The names of this textures are fixed because they are handled
special by the game engine, 4 different sliding door textures are supported
in one level map. The texture names are GDOOR1F[1-8] for the front side
of the first door, GDOOR1B[1-8] for the back side of the first door. Texture
names for the second door are GDOOR2F[1-8] and GDOOR2B[1-8] for front and
back sides, and so on. Eight frames are needed for every side of the door,
showing the door completely closed (GDOOR1F1 e.g.), completely open
(GDOOR1F8 e.g.) and six different frames for various degrees of an open door
(GDOOR1F2 - GDOOR1F7 e.g.). This works similar like animated wall textures, but
for sliding doors not only the animated frames are played on the wall,
also the line properties change appropriate to let players and monsters
pass, don't block shoots when open, and so on. Example sliding door
textures are inluded in the PWAD sldoor.
Unlike regular doors the sliding door will NOT block sound! If a closed
sliding door should block sound two lines with the 'block sound' flag
are required, one can be the line with the door it self.
The front and back sectors of the door line are used to figure, if stuff
is in between the door. The door will not close if monsters, players or
items are in the front or back sector. So use this type of door in a hallway
and surround it with smaller sectors and don't put stuff into this sectors.
A sliding door connected to two large rooms might never close again, because
stuff is in one of the rooms.


2.4 The UAC communication handheld


2.5 Boom compatible thing spawn flags

XDoom has implemented two new thing flags, "not in DM" and "not in
COOP", which in combination with the existing "not in Single" flag,
usually called "Multiplayer", allow complete control over a level's
inventory and monsters, in any game mode.

If you want a thing to be only available in Single play, you set both
the "not in DM" and "not in COOP" flags. Other combinations are
similar.

"not in DM"   is bit 5, value 32, in the thing flags word.
"not in COOP" is bit 6, value 64, in the thing flags word.


2.6 Boom compatible linedefs implemented

The documentation for this linedefs is based on the documentation
included in the Boom 2.02 sources.

Doors
-----
Since a push door (P1/PR) has no use for its tag, XDoom has extended
the functionality to include changing any tagged sectors to maximum
neighbor lighting on fully opening, then to minimum neighbor lighting
on fully closing. This is true for all doors with push triggers.

#        Trig   Lock   Speed    Wait  Monst    Function
175      S1     No     Slow     30s   No       Close, Wait, Then Open
196      SR     No     Slow     30s   No       Close, Wait, Then Open

There are two generalized door linedef types, Generalized Door, and
Generalized Locked Door. The following tables show the possibilities
for each parameter, any combination of parameters is allowed:

Slow and Fast represent the same speeds as slow and fast regular doors. Normal
is twice as fast as slow, Fast is twice normal, Turbo is twice Fast.

Generalized Door Types
---------------------------------------------------------------
#        Trig   Lock   Speed    Wait  Monst    Function

3C00H-   P1/PR  No     Slow     1s    Yes      Open, Wait, Then Close
4000H    S1/SR         Normal   4s    No       Open and Stay Open
         W1/WR         Fast     9s             Close and Stay Closed
         G1/GR         Turbo    30s            Close, Wait, Then Open
                        

Generalized Locked Door Types
---------------------------------------------------------------
#        Trig   Lock   Speed    Wait  Monst    Function

3800H-   P1/PR  Any    Slow     1s    No       Open, Wait, Then Close
3C00H    S1/SR  Blue   Normal   4s             Open and Stay Open
         W1/WR  Red    Fast     9s             Close and Stay Closed
         G1/GR  Yell   Turbo    30s            Close, Wait, Then Open
                BlueC
                RedC
                YellC
                BlueS
                RedS
                YellS
                All3
                All6


Floors
------
A floor can be activated by pushing on a linedef bounding it
(generalized types only), or by pushing on a switch with the same tag
as the floor sector, or by walking over a linedef with the same tag
as the floor, or by shooting a linedef with the same tag as the
floor with an impact weapon.

A floor can move either Up or Down.

A floor can move with speeds of Slow, Normal, Fast, or Turbo. If the
target height specified by the floor function is in the opposite direction
to the floor's motion, then travel is instantaneous, otherwise its at the
speed specified.

A floor action can be a texture change type, in which case after the
action the floor texture of the affected floor, and possibly the
sector type of the affected floor are changed to those of a model
sector. The sector type may be zeroed instead of copied from the
model, or not changed at all. These change types are referred to
below as Tx (texture only), Tx0 (type zeroed), and TxTy (texture and
type changed). The model sector for the change may be the sector on
the first sidedef of the trigger (trigger model) or the sector with
floor at destination height across the lowest numbered two-sided
linedef surrounding the affected sector (numeric model). If no model
sector exists, no change occurs. If a change occurs, floor texture is
always affected, lighting is never affected, even that corresponding
to the sector's type, nor is any other sector property other than the
sector's type.

Numeric model algorithm:

1) Find all floors adjacent to the tagged floor at destination height
2) Find the lowest numbered linedef separating those floors from that tagged
3) The sector on the other side of that linedef is the model

A floor action can have the crush property, in which case players and
monsters are crushed when the floor tries to move above the point
where they fit exactly underneath the ceiling. This means they take
damage until they die, leave the sector, or the floor action is stopped.
A floor action never reverses on encountering an obstacle, even if
the crush property is not true, the floor merely remains in the same
position until the obstacle is removed or dies, then continues.

#     Trig   Dir Spd   Chg  Mdl Mon Crsh  Target
78    SR     --  ----  TxTy Num No  No    None
142   W1     Up  Slow  None --  No  No    Absolute 512
147   WR     Up  Slow  None --  No  No    Absolute 512
153   W1     --  ----  TxTy Trg No  No    None
154   WR     --  ----  TxTy Trg No  No    None
158   S1     Up  Slow  None --  No  No    Abs Shortest Lower Texture
159   S1     Dn  Slow  TxTy Num No  No    Lowest Neighbor Floor
160   S1     Up  Slow  TxTy Trg No  No    Absolute 24
161   S1     Up  Slow  None --  No  No    Absolute 24
176   SR     Up  Slow  None --  No  No    Abs Shortest Lower Texture
177   SR     Dn  Slow  TxTy Num No  No    Lowest Neighbor Floor
178   SR     Up  Slow  None --  No  No    Absolute 512
179   SR     Up  Slow  TxTy Trg No  No    Absolute 24
180   SR     Up  Slow  None --  No  No    Absolute 24
189   S1     --  ----  TxTy Trg No  No    None
190   SR     --  ----  TxTy Trg No  No    None
219   W1     Dn  Slow  None --  No  No    Next Neighbor Floor
220   WR     Dn  Slow  None --  No  No    Next Neighbor Floor
221   S1     Dn  Slow  None --  No  No    Next Neighbor Floor
222   SR     Dn  Slow  None --  No  No    Next Neighbor Floor
239   W1     --  ----  TxTy Num No  No    None
240   WR     --  ----  TxTy Num No  No    None
241   S1     --  ----  TxTy Num No  No    None

The following tables show the possibilities for generalized floor
linedef type parameters. Any combination of parameters is allowed:

Slow and Fast represent the same speeds as slow and fast regular
floors. Normal is twice as fast as slow, Fast is twice normal, Turbo
is twice Fast.

Generalized Floor Types
---------------------------------------------------------------------------
#      Trig   Dir Spd   *Chg *Mdl Mon Crsh  Target

6000H- P1/PR  Up  Slow   None Trg Yes Yes   Lowest Neighbor Floor
7FFFH  S1/SR  Dn  Normal Tx   Num No  No    Next Neighbor Floor
       W1/WR      Fast   Tx0                Lowest Neighbor Ceiling
       G1/GR      Turbo  TxTy               Highest Neighbor Floor
                                            Ceiling
                                            24
                                            32
*Mon(ster) enabled must be No if            Shortest Lower Texture
Chg field is not None

Tx = Texture copied only           Trg = Trigger Model
Tx0 = Texture copied and Type->0   Num = Numeric Model
TxTy = Texture and Type copied


Ceilings
--------
A ceiling can be activated by pushing on a linedef bounding it
(generalized types only), or by pushing on a switch with the same tag
as the ceiling sector, or by walking over a linedef with the same tag
as the ceiling, or by shooting a linedef with the same tag as the
ceiling with an impact weapon (generalized types only).

A ceiling can move either Up or Down.

A ceiling can move with speeds of Slow, Normal, Fast, or Turbo. If the
target height specified by the ceiling function (see Ceiling Targets
above) is in the opposite direction to the ceiling's motion, then
travel is instantaneous, otherwise its at the speed specified.

A ceiling action can be a texture change type, in which case after
the action the ceiling texture of the affected ceiling, and possibly
the sector type of the affected ceiling are changed to those of a
model sector. The sector type may be zeroed instead of copied from
the model, or not changed at all. These change types are referred to
below as Tx (texture only), Tx0 (type set to 0), and TxTy (texture
and type copied from model). The model sector for the change may be
the sector on the first sidedef of the trigger (trigger model) or the
sector with ceiling at destination height across the lowest numbered
two-sided linedef surrounding the affected sector (numeric model). If
no model sector exists, no change occurs. If a change occurs, ceiling
texture is always affected, lighting is never affected, even that
corresponding to the sector's type, nor is any other sector property
other than the sector's type.

Numeric model algorithm:

1) Find all ceilings adjacent to the tagged ceiling at destination height
2) Find the lowest numbered linedef separating those ceilings from that tagged
3) The sector on the other side of that linedef is the model

A ceiling action can have the crush property (generalized types only),
in which case players and monsters are crushed when the ceiling tries
to move below the point where they fit exactly underneath the
ceiling. This means they take damage until they die, leave the
sector, or the ceiling action is stopped.  A ceiling action never
reverses on encountering an obstacle, even if the crush property is
not true, the ceiling merely remains in the same position until the
obstacle is removed or dies, then continues.

#     Trig   Dir Spd   *Chg *Mdl Mon Crsh Target
145   W1     Dn  Fast  None  --  No  No   Floor 
151   WR     Up  Slow  None  --  No  No   Highest Neighbor Ceiling
152   WR     Dn  Fast  None  --  No  No   Floor
166   S1     Up  Slow  None  --  No  No   Highest Neighbor Ceiling
167   S1     Dn  Slow  None  --  No  No   8 Above Floor
186   SR     Up  Slow  None  --  No  No   Highest Neighbor Ceiling
187   SR     Dn  Slow  None  --  No  No   8 Above Floor
199   W1     Dn  Slow  None  --  No  No   Lowest Neighbor Ceiling
200   W1     Dn  Slow  None  --  No  No   Highest Neighbor Floor
201   WR     Dn  Slow  None  --  No  No   Lowest Neighbor Ceiling
202   WR     Dn  Slow  None  --  No  No   Highest Neighbor Floor
203   S1     Dn  Slow  None  --  No  No   Lowest Neighbor Ceiling
204   S1     Dn  Slow  None  --  No  No   Highest Neighbor Floor
205   SR     Dn  Slow  None  --  No  No   Lowest Neighbor Ceiling
206   SR     Dn  Slow  None  --  No  No   Highest Neighbor Floor

Generalized Ceiling Types
---------------------------------------------------------------------------
#      Trig   Dir Spd   *Chg *Mdl Mon Crsh  Target

4000H- P1/PR  Up  Slow   None Trg Yes Yes   Highest Neighbor Ceiling
5FFFH  S1/SR  Dn  Normal Tx   Num No  No    Next Neighbor Ceiling
       W1/WR      Fast   Tx0                Lowest Neighbor Ceiling
       G1/GR      Turbo  TxTy               Highest Neighbor Floor
                                            Floor
                                            24
                                            32
*Mon(ster) enabled must be No if            Shortest Upper Texture
Chg field is not None

Tx = Texture copied only           Trg = Trigger Model
Tx0 = Texture copied and Type->0   Num = Numeric Model
TxTy = Texture and Type copied


Crushing Ceilings
-----------------
A crusher can be activated by pushing on a linedef bounding it
(generalized types only), or by pushing on a switch with the same tag
as the crusher sector, or by walking over a linedef with the same tag
as the crusher, or by shooting a linedef with the same tag as the
crusher with an impact weapon (generalized types only).

A crusher has a speed: slow, normal, fast, or turbo. The slower the
speed, the more damage the crusher does when crushing, simply thru
being applied longer. When a slow or normal crusher is moving down
and encounters something to crush, it slows down even more, by a
factor of 8. This persists until it reaches bottom of stroke and
starts up again. Fast and turbo crushers do not slow down.

A crusher can be silent. The regular silent crusher makes platform
stop and start noises at top and bottom of stroke. The generalized
silent crusher is completely quiet.

A crusher linedef is provided to stop a crusher in its current
position. Care should be used that this doesn't lock the player out
of an area of the wad if the crusher is too low to pass. A crusher
can be restarted, but not changed, with any crusher linedef.

#     Trig   Spd  Mon Silent Action
150   WR     Slow No  Yes    Start
164   S1     Fast No  No     Start
165   S1     Slow No  Yes    Start
168   S1     ---- --  --     Stop
183   SR     Fast No  No     Start
184   SR     Slow No  No     Start
185   SR     Slow No  Yes    Start
188   SR     ---- --  --     Stop

Generalized Crusher Types
---------------------------------------------------------------------------
#      Trig   Spd    Mon  Silent

2F80H- P1/PR  Slow   Yes  Yes
2FFFH  S1/SR  Normal No   No
       W1/WR  Fast        
       G1/GR  Turbo       


Stairs
------
A stair can be activated by pushing on a linedef bounding it
(generalized types only), or by pushing on a switch with the same tag
as the stair sector, or by walking over a linedef with the same tag
as the stair, or by shooting a linedef with the same tag as the
stair with an impact weapon (generalized types only).

Only extended and generalized stair types are retriggerable. The
extended retriggerable stairs are mostly useless, though triggering a
stair with stepsize 8 twice might be used. The generalized
retriggerable stairs alternate building up and down on each
activation which is much more useful.

A stair can build up or down (generalized types only).

A stair can have a step size of 4, 8, 16, or 24. Only generalized
types support stepsize of 4 or 24.

A stair can have build speeds of slow, normal, fast or turbo. Only
generalized types support speeds of normal or turbo.

A stair can stop on encountering a different texture or ignore
(generalized types only) different textures and continue.

Only the regular build fast, stepsize 16 stair has the property that
monsters and players can be crushed by the motion, all others do not
crush.

#     Trig  Dir Spd   Step Ignore Mon
256   WR    Up  Slow  8    No     No
257   WR    Up  Fast  16   No     No
258   SR    Up  Slow  8    No     No
259   SR    Up  Fast  16   No     No

Generalized Stairs Types
---------------------------------------------------------------------------
#      Trig   Dir Spd     Step  Ignore Mon

3000H- P1/PR  Up  Slow    4     Yes    Yes
33FFH  S1/SR  Dn  Normal  8     No     No 
       W1/WR      Fast    16 
       G1/GR      Turbo   24 


Platforms
---------
A platform can be activated by pushing on a linedef bounding it
(generalized types only), or by pushing on a switch with the same tag
as the platform sector, or by walking over a linedef with the same tag
as the platform, or by shooting a linedef with the same tag as the
platform with an impact weapon.

A platform can move with speeds of Slow, Normal, Fast, or Turbo. 
Only the instant toggle platform moves instantly, all others move at
the platform's speed.

A platform can have a delay, in between when it reaches "high" height
and returns to "low" height, or at both ends of the motion in the
case of perpetual lifts.

A platform action can be a texture change type, in which case after
the action the floor texture of the affected floor, and possibly the
sector type of the affected floor are changed to those of a model
sector. The sector type may be zeroed instead of copied from the
model, or not changed at all. These change types are referred to
below as Tx (texture only), Tx0 (type zeroed), and TxTy (texture and
type changed). The model sector for the change is always the sector
on the first sidedef of the trigger (trigger model).  If a change
occurs, floor texture is always affected, lighting is never affected,
even that corresponding to the sector's type, nor is any other sector
property other than the sector's type.

#     Trig   Dly Spd  Chg  Mdl Mon Target
143   W1     --  Slow Tx   Trg No  Raise 24 Units
144   W1     --  Slow Tx0  Trg No  Raise 32 Units
148   WR     --  Slow Tx   Trg No  Raise 24 Units
149   WR     --  Slow Tx0  Trg No  Raise 32 Units
162   S1     3s  Slow None --  No  Lowest and Highest Floor (perpetual)
163   S1     --  ---- ---- --  --  Stop
181   SR     3s  Slow None --  No  Lowest and Highest Floor (perpetual)
182   SR     --  ---- ---- --  --  Stop
211   SR     --  Inst None --  No  Ceiling (toggle)
212   WR     --  Inst None --  No  Ceiling (toggle)

Generalized Lift Types
---------------------------------------------------------------------------
#      Trig   Dly Spd    Mon  Target

3400H- P1/PR  1s  Slow   Yes  Lowest Neighbor Floor
37FFH  S1/SR  3s  Normal No   Next Lowest Neighbor Floor
       W1/WR  5s  Fast        Lowest Neighbor Ceiling
       G1/GR  10s Turbo       Lowest and Highest Floor (perpetual)


Elevators
---------
An elevator is a linedef type that moves both floor and ceiling
together. All elevator linedefs are extended, there are no regular or
generalized elevator types. Instant elevator motion is not possible,
and monsters cannot activate elevators. All elevator triggers are
either switched or walkover.

#     Trig  Spd    Target
227   W1    Fast   Next Highest Floor
228   WR    Fast   Next Highest Floor
229   S1    Fast   Next Highest Floor
230   SR    Fast   Next Highest Floor
231   W1    Fast   Next Lowest Floor
232   WR    Fast   Next Lowest Floor
233   S1    Fast   Next Lowest Floor
234   SR    Fast   Next Lowest Floor
235   W1    Fast   Current Floor
236   WR    Fast   Current Floor
237   S1    Fast   Current Floor
238   SR    Fast   Current Floor


Lighting
--------
The lighting linedef types change the lighting in the tagged sector.
All are regular or extended types, there are no generalized lighting
types. All are switched or walkovers.

#     Trig  Target
156   WR    Blinking
157   WR    Minimum Neighbor
169   S1    Maximum Neighbor
170   S1    35 Units
171   S1    255 Units
172   S1    Blinking
173   S1    Minimum Neighbor
192   SR    Maximum Neighbor
193   SR    Blinking
194   SR    Minimum Neighbor


Exits
-----
An exit linedef type ends the current level bringing up the
intermission screen with its report of kills/items/secrets or frags
in the case of deathmatch. Obviously, none are retriggerable, and
none require tags, since no sector is affected.

#     Trig  Type
197   G1    Normal
198   G1    Secret


Teleporters
-----------
A teleporter can be walkover or switched, and retriggerable or not.

A teleporter can have destination set by a teleport thing in the
tagged sector, or by a line tagged the same as the teleport line.
These are called thing teleporters and line teleporters resp.

A teleporter can preserve orientation or set orientation from the
position, height, and angle of the teleport thing. Note a thing
destination teleporter always sets position, though it may preserve
orientation otherwise.

A teleporter can produce green fog and a whoosh noise, or it can be
silent, in which case it does neither.

A teleporter can transport monsters only, or both players and
monsters.

#     Trig  Silent Mon Plyr Orient    Dest
174   S1    No     Yes Yes  Set       TP thing in tagged sector
195   SR    No     Yes Yes  Set       TP thing in tagged sector
207   W1    Yes    Yes Yes  Preserve  TP thing in tagged sector
208   WR    Yes    Yes Yes  Preserve  TP thing in tagged sector
209   S1    Yes    Yes Yes  Preserve  TP thing in tagged sector
210   SR    Yes    Yes Yes  Preserve  TP thing in tagged sector
243   W1    Yes    Yes Yes  Preserve  Line with same tag
244   WR    Yes    Yes Yes  Preserve  Line with same tag
262   W1    Yes    Yes Yes  Preserve  Line with same tag (reversed)
263   WR    Yes    Yes Yes  Preserve  Line with same tag (reversed)
264   W1    Yes    Yes No   Preserve  Line with same tag (reversed)
265   WR    Yes    Yes No   Preserve  Line with same tag (reversed) 
266   W1    Yes    Yes No   Preserve  Line with same tag 
267   WR    Yes    Yes No   Preserve  Line with same tag 
268   W1    Yes    Yes No   Set       TP thing in tagged sector
269   WR    Yes    Yes No   Set       TP thing in tagged sector


Donuts
------
A donut is a very specialized linedef type that lowers a pillar in a
surrounding pool, while raising the pool and changing its texture and
type.

The tagged sector is the pillar, and its lowest numbered line must be
two-sided. The sector on the other side of that is the pool. The pool
must have a two-sided line whose second sidedef does not adjoin the
pillar, and the sector on the second side of the lowest numbered such
linedef is the model for the pool's texture change. The model sector
floor also provides the destination height both for lowering the
pillar and raising the pool.

No generalized donut linedefs exist, and all are switched or
walkover.

#     Trig
146   W1
155   WR
191   SR


Simple Static Scrollers
-----------------------
For convenience three simple static scroll functions are provided
for when you just need a wall to scroll and don't need to control its
rate and don't want to bother with proportionality.

48     -- Animated wall, Scrolls Left                         

A linedefs with this type scrolls its first sidedef left at a
constant rate of 1 unit per frame.

85     -- Animated wall, Scrolls Right

A linedef with this type scrolls its first sidedef right at a
constant rate of 1 unit per frame.

255    -- Scroll Wall Using Sidedef Offsets                   

For simplicity, a static scroller is provided that scrolls the first
sidedef of a linedef, based on its x- and y- offsets. No tag is used.
The x offset controls the rate of horizontal scrolling, 1 unit per
frame per x offset, and the y offset controls the rate of vertical
scrolling, 1 unit per frame per y offset.


Static Scrollers
----------------
The static scrolling linedefs causes some part of the tagged sector or
tagged wall to scroll, in proportion to the length of the linedef the
trigger is on, and according to the direction that trigger linedef lies.
For each 32 units of length of the trigger, the tagged object scrolls 1
unit per frame. Since the length of a linedef doesn't change during
gameplay, these types are static, the scrolling effect remains constant
during gameplay. However, these effects can be combined with, and/or
canceled by, other scrollers.

250    -- Scroll Tagged Ceiling

The ceiling of the tagged sector scrolls in the direction of the linedef
trigger, 1 unit per frame for each 32 units of linedef trigger length.
Objects attached to the ceiling do not move.

251    -- Scroll Tagged Floor                                 

The floor of the tagged sector scrolls in the direction of the linedef
trigger, 1 unit per frame for each 32 units of linedef trigger length.
Objects resting on the floor do not move.

252    -- Carry Objects on Tagged Floor                       

Objects on the floor of the tagged sector move in the direction of the
linedef trigger, 1 unit per frame for each 32 units of linedef trigger
length. The floor itself does not scroll.

253    -- Scroll Tagged Floor, Carry Objects

Both the floor of the tagged sector and objects resting on that floor
move in the direction of the linedef trigger, 1 unit per frame for each
32 units of linedef trigger length.

254    -- Scroll Tagged Wall

Walls with the same tag as the linedef trigger scroll at the same
rate as a floor or ceiling controlled by one of 250-253, allowing
their motion to be synchronized. When the linedef trigger is not
parallel to the wall, the component of the linedef in the direction
perpendicular to the wall causes the wall to scroll vertically. The
length of the component parallel to the wall sets the horizontal
scroll rate.


Dynamic Scrollers
-----------------
To achieve dynamic scrolling effects, the position or rate of scrolling
is controlled by the relative position of the floor and ceiling of the
sector on the scrolling trigger's first sidedef. The direction of
scrolling remains controlled by the direction of the linedef trigger.
Either the floor or ceiling may move in the controlling sector, or
both. The control variable is the amount of change in the sum of the
floor and ceiling heights.

All scroll effects are additive, and thus two or more effects may
reinforce and/or cancel each other.

Displacement Scrollers
----------------------
In the first kind, displacement scrolling, the position of the scrolled
objects or walls changes proportionally to the motion of the floor or
ceiling in the sector on the first sidedef of the scrolling trigger. 
The proportionality is set by the length of the linedef trigger. If it
is 32 units long, the wall, floor, ceiling, or object moves 1 unit for
each unit the floor or ceiling of the controlling sector moves. If it
is 64 long, they move 2 units per unit of relative floor/ceiling motion
in the controlling sector and so on.

245    -- Scroll Tagged Ceiling w.r.t. 1st Side's Sector 

The tagged sector's ceiling texture scrolls in the direction of the
scrolling trigger line, when the sector on the trigger's first sidedef
changes height. The amount moved is the height change times the trigger
length, divided by 32. Objects attached to the ceiling do not move.


246    -- Scroll Tagged Floor w.r.t. 1st Side's Sector        

The tagged sector's floor texture scrolls in the direction of the 
scrolling trigger line when the sector on the trigger's first sidedef
changes height. The amount moved is the height change times the trigger
length, divided by 32. Objects on the floor do not move.


247    -- Push Objects on Tagged Floor wrt 1st Side's Sector  

Objects on the tagged sector's floor move in the direction of the
scrolling trigger line when the sector on the trigger's first sidedef 
changes height. The amount moved is the height change times the trigger
length, divided by 32.


248    -- Push Objects & Tagged Floor wrt 1st Side's Sector   

The tagged sector's floor texture, and objects on the floor, move in 
the direction of the scrolling trigger line when the sector on the
trigger's first sidedef changes height.  The amount moved is the height
change times the trigger length, divided by 32. 


249    -- Scroll Tagged Wall w.r.t 1st Side's Sector          

Walls with the same tag as the linedef trigger scroll at the same
rate as a floor or ceiling controlled by one of 245-249, allowing
their motion to be synchronized. When the linedef trigger is not
parallel to the wall, the component of the linedef in the direction
perpendicular to the wall causes the wall to scroll vertically. The
length of the component parallel to the wall sets the horizontal
scroll displacement, the length of the component perpendicular to
the wall sets the vertical scroll displacement. The distance scrolled
is the controlling sector's height change times the trigger length,
divided by 32.


Accelerative Scrollers
----------------------
The second kind of dynamic scrollers, accelerative scrollers, also
react to height changes in the sector on the first sidedef of the
linedef trigger, but the RATE of scrolling changes, not the
displacement. That is, changing the controlling sector's height
speeds up or slows down the scrolling by the change in height
times the trigger's length, divided by 32. 

An on/off scroller can be made by using an accelerative scroller
and any linedef that changes the controlling sector's heights.
If a scroll effect which is initially on is desired, then the
accelerative scroller should be combined with a static one which
turns the scroll effect on initially. The accelerative scroller
would then need to be set up to cancel the static scroller's
effect when the controlling sector's height changes.


214    -- Accel Tagged Ceiling w.r.t. 1st Side's Sector

The tagged sector's ceiling's rate of scroll changes in the direction
of the trigger linedef (use vector addition if already scrolling) by 
the change in height of the sector on the trigger's first sidedef
times the length of the linedef trigger, divided by 32. For example,
if the ceiling is motionless originally, the linedef trigger is 32 
long, and the ceiling of the controlling sector moves 1 unit, the 
tagged ceiling will start scrolling at 1 unit per frame.


215    -- Accel Tagged Floor w.r.t. 1st Side's Sector         

The tagged sector's floor's rate of scroll changes in the direction of
the trigger linedef (use vector addition if already scrolling) by the
change in height of the sector on the trigger's first sidedef times
the length of the linedef trigger, divided by 32. For example, if
the floor is motionless originally, the linedef trigger is 32 long,
and the ceiling of the controlling sector moves 1 unit, the tagged
floor will start scrolling at 1 unit per frame.


216    -- Accel Objects on Tagged Floor wrt 1st Side's Sector 

Objects on the tagged sector's floor's rate of motion changes in the
direction of the trigger linedef (use vector addition if already
moving) by the change in height of the sector on the trigger's first
sidedef times the length of the linedef trigger divided by 32. For
example, if the objects are motionless originally, the linedef trigger
is 32 long, and the ceiling of the controlling sector moves 1 unit,
the objects on the tagged floor will start moving at 1 unit per frame.


217    -- Accel Objects&Tagged Floor wrt 1st Side's Sector    

The tagged sector's floor, and objects on it, change its rate of 
motion in the direction of the trigger linedef (use vector addition
if already moving) by the change in height of the sector on the
trigger's first sidedef times the length of the linedef trigger, divided
by 32. For example, if the floor and objects are motionless originally,
the linedef trigger is 32 long, and the ceiling of the controlling
sector moves 1 unit, the objects and the tagged floor will start moving
at 1 unit per frame.


218    -- Accel Tagged Wall w.r.t 1st Side's Sector           

Walls with the same tag as the linedef trigger increase their 
scroll rate in sync with a floor or ceiling controlled by one of
214-217. When the linedef trigger is not parallel to the wall, the 
component of the linedef in the direction perpendicular to the wall 
causes the wall to increase its vertical scroll rate. The length of 
the component parallel to the wall sets the change in horizontal
scroll rate, the length of the component perpendicular to the wall
sets the change in vertical scroll rate. The rate change is the height
change times the trigger length, divided by 32.


Property Transfer
-----------------
These linedefs are special purpose and are used to transfer
properties from the linedef itself or the sector on its first sidedef 
to the tagged sector(s). None are triggered, they simply exist.

213	-- Set Tagged Floor Lighting to Lighting on 1st Sidedef's Sector

Used to give the floor of a sector a different light level from the
remainder of the sector. For example bright lava in a dark room.

261	-- Set Tagged Ceiling Lighting to Lighting on 1st Sidedef's Sector

Used to give the ceiling of a sector a different light level from the
remainder of the sector.

260	--   Make Tagged Lines (or this line if tag==0) Translucent

Used to make 2s normal textures translucent. If tag==0, then this linedef's
normal texture is made translucent if it's 2s, and the default translucency
map TRANMAP is used as the filter. If tag!=0, then all similarly-tagged 2s
linedefs' normal textures are made translucent, and if this linedef's first
sidedef contains a valid lump name for its middle texture (as opposed to a
texture name), and the lump is 64K long, then that lump will be used as the
translucency filter instead of the default TRANMAP, allowing different
filters to be used in different parts of the same maps. If the first side's
normal texture is not a valid translucency filter lump name, it must be a
valid texture name, and will be displayed as such on this linedef.

242	--   Set Tagged Lighting, Flats Heights to 1st Sidedef's Sector,
             and set colormap based on sidedef textures.

This allows the tagged sector to have two levels -- an actual floor and 
ceiling, and another floor or ceiling where more flats are rendered. Things
will stand on the actual floor or hang from the actual ceiling, while this
function provides another rendered floor and ceiling at the heights of the
sector on the first sidedef of the linedef. Typical use is "deep water" that
can be over the player's head.

     ----------------------------------  < real sector's ceiling height
    |         real ceiling             | < control sector's ceiling texture
    |                                  |
    |                                  | < control sector's lightlevel
    |              A                   |
    |                                  | < upper texture as colormap
    |                                  |
    |                                  | < control sector's floor texture
     ----------------------------------  < control sector's ceiling height
    |         fake ceiling             | < real sector's ceiling texture
    |                                  |
    |                                  | < real sector's lightlevel
    |              B                   |
    |                                  | < normal texture as colormap
    |                                  |
    |          fake floor              | < real sector's floor texture
     ----------------------------------  < control sector's floor height
    |                                  | < control sector's ceiling texture
    |                                  |
    |                                  | < control sector's lightlevel
    |              C                   |
    |                                  | < lower texture as colormap
    |                                  |
    |          real floor              | < control sector's floor texture
     ----------------------------------  < real sector's floor height

XDoom sectors controlled by a 242 linedef are partitioned into 3 spaces.
The viewer's xyz coordinates uniquely determine which space they are in.

If they are in space B (normal space), then the floor and ceiling textures
and lightlevel from the real sector are used, and the colormap from the 242
linedef's first sidedef's normal texture is used (COLORMAP is used if it's
invalid or missing). The floor and ceiling are rendered at the control
sector's heights.

If they are in space C ("underwater"), then the floor and ceiling textures
and lightlevel from the control sector are used, and the lower texture in
the 242 linedef's first sidedef is used as the colormap.

If they are in space A ("head over ceiling"), then the floor and ceiling
textures and lightlevel from the control sector are used, and the upper
texture in the 242 linedef's first sidedef is used as the colormap.

If only two of these adjacent partitions in z-space are used, such as 
underwater and normal space, one has complete control over floor textures,
ceiling textures, light level, and colormaps, in each of the two partitions.
The control sector determines the textures and lighting in the more "unusual"
case (e.g. underwater).

It's also possible for the fake floor to extend below the real floor, in
which case an invisible platform / stair effect is created. In that case,
the picture looks like this (barring any ceiling effects too):

     ----------------------------------  < real sector's ceiling texture
    |   real ceiling = fake ceiling    |
    |                                  |
    |                                  |
    |              B                   | < real sector's lightlevel
    |                                  | < normal texture's colormap
    |                                  |
    |          real floor              |
     ----------------------------------  < invisible, no texture drawn
    |                                  |
    |                                  |
    |                                  | < real sector's lightlevel
    |              C                   | < normal texture's colormap
    |                                  |
    |                                  |
    |          fake floor              | < real sector's floor texture
     ----------------------------------  < fake sector's floor height

In this case, since the viewer is always at or above the fake floor, no
colormap/lighting/texture changes occur -- the fake floor just gets drawn
at the control sector's height, but at the real sector's lighting and
texture, while objects stand on the higher height of the real floor.

It's the viewer's position relative to the fake floor and/or fake ceiling,
which determines whether the control sector's lighting and textures should
be used, and which colormap should be used. If the viewer is always between
the fake floor and fake ceiling, then no colormap, lighting, or texture
changes occur, and the view just sees the real sector's textures and light
level drawn at possibly different heights.

If the viewer is below the fake floor height set by the control sector, or is
above the fake ceiling height set by the control sector, then the corresponding
colormap is used (lower or upper texture name), and the textures and lighting
are taken from the control sector rather than the real sector. They are still
stacked vertically in standard order -- the control sector's ceiling is always
drawn above the viewer, and the control sector's floor is always drawn below
the viewer.

The kaleidescope effect only occurs when F_SKY1 is used as the control sector's
floor or ceiling. If F_SKY1 is used as the control sector's ceiling texture,
then under water, only the control sector's floor appears, but it "envelops"
the viewer. Similarly, if F_SKY1 is used as the control sector's floor texture,
then when the player's head is over a fake ceiling, the control sector's
ceiling is used throughout.

F_SKY1 causes HOM when used as a fake ceiling between the viewer and normal
space. Since there is no other good use for it, this kaleidescope is an
option turned on by F_SKY1. Note that this does not preclude the use of sky
REAL ceilings over deep water -- this is the control sector's ceiling, the
one displayed when the viewer is underwater, not the real one.

A colormap has the same size and format as Doom's COLORMAP. Extra colormaps
may defined in XDoom by adding them between C_START and C_END markers in wads.
Colormaps between C_START and C_END are automatically merged by XDoom with any
previously defined colormaps.

WATERMAP is a colormap predefined by XDoom which can be used to provide a
blue-green tint while the player is under water. WATERMAP can be modified by
pwads.

Ceiling bleeding may occur if required upper textures are not used.


223	--   Length Sets Friction in tagged Sector, Sludge < 100, Ice > 100

The length of the linedef with type 223 controls the amount of friction
experienced by the player in the tagged sector, when in contact with the
floor. Lengths less than 100 are sticker than normal, lengths greater than
100 are slipperier than normal. The effect is only present in the tagged
sector when its friction enable bit (bit 8) in the sector type is set.
This allows the flat to be changed in conjunction with turning the effect
on or off thru texture/type changes.


Constant pushers
----------------
Two types of constant pushers are available, wind and current. Depending
on whether you are above, on, or below (special water sectors) the ground
level, the amount of force varies.

The length of the linedef defines the 'full' magnitude of the force, and
the linedef's angle defines the direction.

     line type         above  on   under
     ---------         -----  --   -----
     wind       224    full  half  none
     current    225    none  full  full

The linedef should be tagged to the sector where you want the effect. The
special type of the sector should have bit 9 set (0x200). If this bit
is turned off, the effect goes away. For example, a fan creating a wind
could be turned off, and the wind dies, by changing the sector type and
clearing that bit.

Constant pushers can be combined with scrolling effects and point
pushers.

224	--   Length/Direction Sets Wind Force in tagged Sectors


225	--   Length/Direction Sets Current Force in tagged Sectors

Point pushers
-------------
Two types of point pushers are available, push and pull.

The previous implementation of these was SECTOR-SPECIFIC. The new
implementation ignores sector boundaries and provides the effect in a
circular area whose center is defined by a Thing of type 5001 (push)
or 5002 (pull). You now also don't have to set any option flags on these
Things. A new linedef type of 226 is used to control the effect, and this
line should be tagged to the sector with the 5001/5002 Thing.

The length of the linedef defines the 'full' magnitude of the force, and
the force is inversely proportional to distance from the point source. If
the length of the controlling linedef is L, then the force is reduced to
zero at a distance of 2L.

The angle of the controlling linedef is not used.

The sector where the 5001/5002 Things reside must have bit 9 set (0x200)
in its type. If this is turned off, the effect goes away.

Point pushers can be combined with scrolling effects and constant
pushers.

226	--   Length Sets Point Source Wind/Current Force in Tagged Sectors


#######################################################
Detailed Generalized Linedef Specification
#######################################################


XDoom has added generalized linedef types that permit the parameters
of linedef actions to be nearly independently chosen. 

NOTE to wad authors:

This requires a lot of type numbers, 20608 in all so far. Some
editors may object to the presence of these new types thru assuming
that a lookup table of size 256 suffices (or some other reason). For
those that must continue to use such an editor, it may be necessary
to stick to the old linedef types, which are still present.

Command line tools are provided to calculate these linedef types,
independent of which editor you happen to use. See TRIGCALC included
in the xwadtools distribution.

== Generalized Linedef Ranges =======================================

There are types for Floors, Ceilings, Doors, Locked Doors, Lifts,
Stairs, and Crushers. The allocation of linedef type field numbers is 
according to the following table:

Type            Start      Length   (Dec)
-----------------------------------------------------------------
Floors          0x6000     0x2000  (8192)
Ceilings        0x4000     0x2000  (8192)
Doors           0x3c00     0x0400  (1024)
Locked Doors    0x3800     0x0400  (1024)
Lifts           0x3400     0x0400  (1024)
Stairs          0x3000     0x0400  (1024)
Crushers        0x2F80     0x0080   (128)
-----------------------------------------------------------------
Totals:  0x2f80-0x7fff     0x5080  (20608)

======================================================================

The following sections define the placement and meaning of the bit
fields within each linedef category. Fields in the description are
listed in increasing numeric order.

Some nomenclature:

Target height designations:

H means highest, L means lowest, N means next, F means floor, C means
ceiling, n means neighbor, Cr means crush, sT means shortest
lower texture. 

Texture change designations:

c0n  change texture, change sector type to 0, numeric model change
c0t  change texture, change sector type to 0, trigger model change
cTn  change texture only, numeric model change
cTt  change texture only, trigger model change
cSn  change texture and sector type to model's, numeric model change
cSt  change texture and sector type to model's, trigger model change

A trigger model change uses the sector on the first side of the
trigger for its model. A numeric model change looks at the sectors
adjoining the tagged sector at the target height, and chooses the one
across the lowest numbered two sided line for its model. If no model
exists, no change occurs. Note that in DOOM II v1.9, no model meant
an illegal sector type was generated.


------------------------------------------------------------------
generalized floors (8192 types)

field   description                       NBits   Mask     Shift
------------------------------------------------------------------

trigger W1/WR/S1/SR/G1/GR/D1/DR            3     0x0007      0
speed   slow/normal/fast/turbo             2     0x0018      3
model   trig/numeric -or- nomonst/monst    1     0x0020      5
direct  down/up                            1     0x0040      6
target  HnF/LnF/NnF/LnC/C/sT/24/32         3     0x0380      7
change  nochg/zero/txtonly/type            2     0x0c00      10
crush   no/yes                             1     0x1000      12

TRIGCALC Nomenclature:

W1[m] F->HnF DnS [c0t] [Cr]
WR[m] F->LnF DnN [c0n] 
S1[m] F->NnF DnF [cTt]  
SR[m] F->LnC DnT [cTn]          
G1[m] F->C   UpS [cSt]          
GR[m] FbysT  UpN [cSn]          
D1[m] Fby24  UpF                        
DR[m] Fby32  UpT                        

Notes:

1) When change is nochg, model is 1 when monsters can activate trigger
   otherwise monsters cannot activate it.
2) The change fields mean the following:
   nochg   - means no texture change or type change
   zero    - means sector type is zeroed, texture copied from model
   txtonly - means sector type unchanged, texture copied from model
   type    - means sector type and floor texture are copied from model
3) down/up specifies the "normal" direction for moving. If the
   target specifies motion in the opposite direction, motion is instant.
   Otherwise it occurs at speed specified by speed field.
4) Speed is 1/2/4/8 units per tic
5) If change is nonzero then model determines which sector is copied.
   If model is 0 its the sector on the first side of the trigger.
   if model is 1 (numeric) then the model sector is the sector at
   destination height on the opposite side of the lowest numbered
   two sided linedef around the tagged sector. If it doesn't exist
   no change occurs.

------------------------------------------------------------------
generalized ceilings (8192 types)

field   description                        NBits   Mask     Shift
------------------------------------------------------------------

trigger W1/WR/S1/SR/G1/GR/D1/DR             3     0x0007      0
speed   slow/normal/fast/turbo              2     0x0018      3
model   trig/numeric -or- nomonst/monst     1     0x0020      5
direct  down/up                             1     0x0040      6
target  HnC/LnC/NnC/HnF/F/sT/24/32          3     0x0380      7
change  nochg/zero/txtonly/type             2     0x0c00      10
crush   no/yes                              1     0x1000      12

TRIGCALC Nomenclature:

W1[m] C->HnC DnS [Cr] [c0t] 
WR[m] C->LnC DnN      [c0n] 
S1[m] C->NnC DnF      [cTt] 
SR[m] C->HnF DnT      [cTn]     
G1[m] C->F   UpS      [cSt]     
GR[m] CbysT  UpN      [cSn]     
D1[m] Cby24  UpF                        
DR[m] Cby32  UpT                        

Notes:

1) When change is nochg, model is 1 when monsters can activate trigger
   otherwise monsters cannot activate it.
2) The change fields mean the following:
   nochg   - means no texture change or type change
   zero    - means sector type is zeroed, texture copied from model
   txtonly - means sector type unchanged, texture copied from model
   type    - means sector type and ceiling texture are copied from model
3) down/up specifies the "normal" direction for moving. If the
   target specifies motion in the opposite direction, motion is instant.
   Otherwise it occurs at speed specified by speed field.
4) Speed is 1/2/4/8 units per tic
5) If change is nonzero then model determines which sector is copied.
   If model is 0 its the sector on the first side of the trigger.
   if model is 1 (numeric) then the model sector is the sector at
   destination height on the opposite side of the lowest numbered
   two sided linedef around the tagged sector. If it doesn't exist
   no change occurs.

------------------------------------------------------------------
generalized doors (1024 types)

field   description                       NBits    Mask     Shift
------------------------------------------------------------------

trigger W1/WR/S1/SR/G1/GR/D1/DR            3      0x0007      0
speed   slow/normal/fast/turbo             2      0x0018      3
kind    odc/o/cdo/c                        2      0x0060      5
monster n/y                                1      0x0080      7
delay   1/4/9/30 (secs)                    2      0x0300      8

TRIGCALC Nomenclature:

W1[m] OpnD{1|4|9|30}Cls S
WR[m] Opn               N
S1[m] ClsD{1|4|9|30}Opn F
SR[m] Cls               T
G1[m]
GR[m]
D1[m]
DR[m]

Notes:

1) The odc (Open, Delay, Close) and cdo (Close, Delay, Open) kinds use
   the delay field. The o (Open and Stay) and c (Close and Stay) kinds 
   do not.
2) The precise delay timings in gametics are: 35/150/300/1050
3) Speed is 2/4/8/16 units per tic

------------------------------------------------------------------
generalized locked doors (1024 types)

field   description                       NBits    Mask     Shift
------------------------------------------------------------------

trigger W1/WR/S1/SR/G1/GR/D1/DR            3      0x0007      0
speed   slow/normal/fast/turbo             2      0x0018      3
kind    odc/o                              1      0x0020      5
lock    any/rc/bc/yc/rs/bs/ys/all          3      0x01c0      6
sk=ck   n/y                                1      0x0200      9

TRIGCALC Nomenclature:

W1[m] OpnDCls           S Any
WR[m] Opn               N R{C|S|K}
S1[m]                   F B{C|S|K}
SR[m]                   T Y{C|S|K}
G1[m]                     All{3|6}
GR[m]
D1[m]
DR[m]

Notes:

1) Delay for odc kind is constant at 150 gametics or about 4.333 secs
2) The lock field allows any key to open a door, or a specific key to
   open a door, or all keys to open a door.
3) If the sk=ck field is 0 (n) skull and cards are different keys,
   otherwise they are treated identically. Hence an "all" type door
   requires 3 keys if sk=ck is 1, and 6 keys if sk=ck is 0.
4) Speed is 2/4/8/16 units per tic

-------------------------------------------------------------------
generalized lifts (1024 types)

field   description                       NBits    Mask     Shift
-------------------------------------------------------------------

trigger W1/WR/S1/SR/G1/GR/D1/DR            3      0x0007      0
speed   slow/normal/fast/turbo             2      0x0018      3
monster n/y                                1      0x0020      5
delay   1/3/5/10 (secs)                    2      0x00c0      6
target  LnF/NnF/LnC/LnF<->HnF(perp.)       2      0x0300      8

TRIGCALC Nomenclature:

W1[m] Lft  F->LnFD{1|3|5|10}    S
WR[m]      F->NnFD{1|3|5|10}    N
S1[m]      F->LnCD{1|3|5|10}    F
SR[m]      HnF<->LnFD{1|3|5|10} T
G1[m]
GR[m]
D1[m]
DR[m]

Notes:

1) The precise delay timings in gametics are: 35/105/165/350
2) Speed is 1/2/4/8 units per tic
3) If the target specified is above starting floor height, or does not
   exist the lift does not move when triggered. NnF is Next Lowest
   Neighbor Floor.
4) Starting a perpetual lift between lowest and highest neighboring floors
   locks out all other floor actions on the sector, even if it is stopped
   with the non-extended stop perpetual floor function.

-------------------------------------------------------------------
generalized stairs (1024 types)

field   description                       NBits    Mask     Shift
-------------------------------------------------------------------

trigger W1/WR/S1/SR/G1/GR/D1/DR            3      0x0007      0
speed   slow/normal/fast/turbo             2      0x0018      3
monster n/y                                1      0x0020      5
step    4/8/16/24                          2      0x00c0      6
dir     dn/up                              1      0x0100      8
igntxt  n/y                                1      0x0200      9

TRIGCALC Nomenclature:

W1[m] Stair Dn s4  S [Ign]
WR[m]       Up s8  N
S1[m]          s16 F
SR[m]          s24 T
G1[m]
GR[m]
D1[m]
DR[m]

Notes:

1) Speed is .25/.5/2/4 units per tic
2) If igntxt is 1, then the staircase will not stop building when
   a step does not have the same texture as the previous.
3) A retriggerable stairs builds up and down alternately on each
   trigger.

-------------------------------------------------------------------
generalized crushers (128 types)

field   description                       NBits    Mask     Shift
-------------------------------------------------------------------

trigger W1/WR/S1/SR/G1/GR/D1/DR            3      0x0007      0
speed   slow/normal/fast/turbo             2      0x0018      3
monster n/y                                1      0x0020      5
silent  n/y                                1      0x0040      6

TRIGCALC Nomenclature:

W1[m] Crusher S [Silent]
WR[m]         N
S1[m]         F
SR[m]         T
G1[m]
GR[m]
D1[m]
DR[m]

Notes:

1) Speed is 1/2/4/8 units per second, faster means slower damage as usual.
2) If silent is 1, the crusher is totally quiet, no start/stop sounds
                                           

======================================================================
                        Sector Types
======================================================================

XDoom is backward compatible with DOOM's sector types. All types 0-17
have the same meaning they did under DOOM. Types 18-31 are reserved
for extended sector types, that work like DOOM's and share the
limitation that only one type can be active in a sector at once. No
extended sector types are implemented at this time.

####################################
	Regular Sector types
####################################

From Matt Fell's Unofficial DOOM Spec the DOOM sector types are:

Dec Hex Class   Description
-------------------------------------------------------------------
 0  00  -       Normal, no special characteristic.
 1  01  Light   random off
 2  02  Light   blink 0.5 second
 3  03  Light   blink 1.0 second
 4  04  Both    -10/20% health AND light blink 0.5 second
 5  05  Damage  -5/10% health
 7  07  Damage  -2/5% health
 8  08  Light   oscillates
 9  09  Secret  a player must stand in this sector to get credit for
                  finding this secret. This is for the SECRETS ratio
                  on inter-level screens.
10  0a  Door    30 seconds after level start, ceiling closes like a door.
11  0b  End     -10/20% health. If a player's health is lowered to less
                  than 11% while standing here, then the level ends! Play
                  proceeds to the next level. If it is a final level
                  (levels 8 in DOOM 1, level 30 in DOOM 2), the game ends!
12  0c  Light   blink 0.5 second, synchronized
13  0d  Light   blink 1.0 second, synchronized
14  0e  Door    300 seconds after level start, ceiling opens like a door.
16  10  Damage  -10/20% health

17  11  Light   flickers on and off randomly

Note that XDoom will NEVER exit the game on an illegal sector type, as
was the case with DOOM. The sector type will merely be ignored.

####################################
	Generalized sector types
####################################

XDoom also provides generalized sector types, based on bit fields,
that allow several sector type properties to be independently
specified for a sector. Texture change linedefs can be used to switch
some or all of these properties dynamically, outside lighting.

Bits 0 thru 4 specify the lighting type in the sector, the same codes
that DOOM used are employed:

Dec Bits 4-0   Description
-------------------------------------------------------------------
0   00000      Normal lighting
1   00001      random off
2   00010      blink 0.5 second
3   00011      blink 1.0 second
4   00100      -10/20% health AND light blink 0.5 second
8   01000      oscillates
12  01100      blink 0.5 second, synchronized
13  01101      blink 1.0 second, synchronized
17  10001      flickers on and off randomly

Bits 5 and 6 set the damage type of the sector, with the usual
5/10/20 damage units per second.

Dec Bits 6-5   Description
-------------------------------------------------------------------
0   00         No damage
32  01         5  units damage per sec (halve damage in TYTD skill)
64  10         10 units damage per sec
96  11         20 units damage per sec

Bit 7 makes the sector count towards the secrets total at game end

Dec Bit 7      Description
-------------------------------------------------------------------
0    0         Sector is not secret
128  1         Sector is secret

Bit 8 enables the ice/mud effect controlled by linedef 223

Dec Bit 8      Description
-------------------------------------------------------------------
0    0         Sector friction disabled
256  1         Sector friction enabled

Bit 9 enables the wind effects controlled by linedefs 224-226

Dec Bit 9      Description
-------------------------------------------------------------------
0    0         Sector wind disabled
512  1         Sector wind enabled

Bits 10 and 11 are not implemented yet, but are reserved for use in
sound control. Bit 10 will suppress all sounds within the sector,
while bit 11 will disable any sounds due to floor or ceiling motion
by the sector.


2.7 Linedefs implemented from MBF/LxDoom

271	--   Sky property transfer

The upper texture will be used as sky texture in all tagged levels.
This allows multiple skies in different outside areas of one map,
or usage of the IWAD builtin skies from another episode, without the
need to extract the texture und replace the one for the episode, the
map is for.

272	--   Flipped Sky property transfer

Same as 271, but the texture will be flipped.


2.8 Various XDoom specific new linedefs

Silent working doors in combination with object carrying floors are helpful
for releasing new stuff into a level unheard by players:

#     Trig   Lock   Speed    Wait  Monst Plyr   Function
350   W1     No     Slow     --    No    Yes    Open silent and stay open
351   S1     No     Slow     --    No    Yes    Open silent and stay open
352   W1     No     Slow     --    Yes   No     Open silend and stay open
