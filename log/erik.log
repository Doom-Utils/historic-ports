Erik Sandberg's Log

1999/03/30

Finally added a proper system to change the FOV. The zoom key (default tilde)
toggles between normal fov and zoomed fov, both of these are configurable in
the menu.

1999/03/28

Enabled the enter key on the numeric keypad.

-debugfile can now be followed by the name of the output file. If no name is
given it will be debug<d>.txt, where <d> is the lowest integer that doesn't
result in a name conflict.

Fixed some bugs that made low resolutions like 80x80 impossible.

Made -fast_startup the default setting, pass -slow_startup instead for the
slower startup. The slowdown that -fast_startup results in is not even
possible to measure.

Wrote BLF versions of 8- and 16-bit R_DrawColumn routines.

1999/03/21

Cleaned up mlook, and finished all the FOV code.

There is no good fov interface yet, but there will come one soon. There is
support for weird asymmetric fovs, but currently the player view will only
use a normal fov type.

Variables:
FIELDOFVIEW is back (I removed a week ago). It shows the x fov.
aspect_ratio shows the normal texel w/h ratio on the monitor (ie 5/8).
top/bottom/left/rightangle show the angles of the edges of the screen.
0 is straight forward (focus), negative is down/right and positive is up/left
top/bottom/left/rightslope show the slopes of the edges of the screen. These
are the variables that actually are used. slope = tan(angle).

1999/03/20

Asymmetric X FOV, including cleanup. Added leftangle and rightangle.
Fixed mlook, so that any fractional mlook angles work (prepares for
asymmetric Y FOV)

Change in *ALL* DrawColumn routines: Frac calculation now works in a different
way: Previously, the initial frac was calculated as
(dc_texturemid + (dc_yl-centery)*dc_iscale). Now centery*dc_iscale is
subtracted from dc_texturemid before the call, so the frac is instead
calculated as (dc_texturemid + dc_yl*dc_iscale). This change was necessary to
make mlook steps smaller than 1 pixel possible.

1999/03/14

Continued the FIELDOFVIEW improvements: Replaced FIELDOFVIEW variable by
X_FOV and Y_FOV. These can be changed dynamically. Boosted up the maximal
X FOV from 127 to 176 degrees (Bigger FOVs would result in texture
scale overwrapping).

1999/03/07

Made FIELDOFVIEW dynamic, fixed the aspect ratio problem in weird gfx modes

1999/02/12

Improved the 8-bit translucency. Four bits more precision, but mariginally
slower (1 more assembler instruction required per pixel)

1999/02/12

Improved & optimised the R_DrawColumn16_BLF routine, and made an 8-bit version

1998/12/18

Made 8-bit versions of Kester's R_DrawSpan16_KM and R_DrawColumn16_KM.

1998/11/29

Optimised the 16-bit translucency algorithm.

1998/11/28

Made the new teleport settings togglable from the menu. Fixed a few small
bugs.

1998/11/08

Used the new translucency to improve the ColorXForm wipe algorithm. Also
created slow 16-bit versions of the new translucency routines.

1998/10/29

Implemented a new translucency algorithm for 8-bit colour, and used it to
create a fading effect at teleportation.

1998/09/11

Improved multires handling at startup: It now just does some first time stuff
like transtable inits, followed by a R_ChangeResolution call.

1998/08/25

Added a -fast_startup parameter.
Fixed the alignment of the R_Draw*_id routines

1998/08/24

Some minor cleanups

1998/08/20

Added dynamic resolution changing.

1998/08/14

Added a routine for run-time alignment in v_res.c. Changed r_span.S and
r_column.S to get aligned run-time.

1998/08/13

i_system.c, i_system.h, v_res.c: Minor change in the cputype_t struct.
Corrected some incorrect detections. Added -list parameter (lists all
available routines).

Added R_DrawSpan8_id and R_DrawSpan8_id_Erik, and optimised
R_DrawColumn8_id_Erik further.

1998/08/06

Minor change in the MMX routines: Stack is used instead of mmxcomm variable,
as a workaround for DJGPP's misalignment. Should speed up the routines on
Intel MMX processors by either 0% or about 50% (randomly), and generally
less on non-Intel MMX processors.

1998/08/05

Fixed bug in original R_DrawColumn16 asm version and moved the routine to
r_column.S. Also simplified the screenwidth patching in r_draw2.c

1998/08/05

New CPU checking system. Each known CPU type (486, Pentium, K6, Pentium II...)
now has its own struct telling its attributes (CPU name and which routines to
use). Each CPU-specific routine also has an own struct, telling its name,
location and MMX usage.

Added cmd-line options "-UseCol" and "-UseSpan" to choose drawing routine,
overriding the default. For example, -UseCol Rasem means that Rasem's asm
version of R_DrawColumn is used.

Files affected:
i_system.c: CPU detecting code, routine choosing
i_system.h: CPU structs
v_res.c: Actual modification of function pointers

1998/08/05

Made the following .c files include their own .h files:
d_net.c
i_video.c
lu_str.c
m_argv.c
m_random.c
p_mobj.c
p_saveg.c
p_setup.c
p_spec.c
p_tick.c
rad_trig.c
r_bsp.c
r_draw1.c
r_draw2.c
r_main.c
r_plane.c
r_segs.c
r_things.c
(ie. added #include "p_mobj.h" in p_mobj.c, etc)
I do this because if any function prototype changes, and you forget to change
that in the .h file, you'll now get a warning. Else it would result in a bug
that may be hard to trace.

1998/08/04

Converted id's original R_DrawColumn code to .S format. This is
self-modifying, which is very time-consuming on newer CPUs, but I guess it is
fast on a 486. Also made a further optimised version of it, optimised
according to the optimisation rules I know for 486. The names are
R_DrawColumn8_id and R_DrawColumn8_id_Erik, respectively.

Files affected:
r_column.s: The routines
r_draw1.h: Prototypes

1998/08/01

Optimised R_DrawColumn8 for Pentium and Pentium MMX. Moved all inline asm
routines from r_draw1.c to r_column.s and r_span.s, and simplified the system
for run-time screenwidth patching in r_draw1.c.

Files affected:
r_column.s
r_span.s
r_draw1.c
r_draw1.h

1998/07/24

Optimised R_DrawSpan8 for MMX processors (K6, PII, PMMX).

1998/07/05

Optimised R_DrawColumn8 for K6/PII, using MMX instructions.


